name: Nightly Package Update
# use branch pushes for testing
on:
  push:
    branches:
      - main
# on:
#   schedule:
#     - cron: '15 1 * * * '

jobs:
  regenerate:
    name: Regenerate nix package index
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - uses: actions/cache@v2
        id: bin-cache
        with:
          path: .bin
          key: ${{ runner.os }}-bin-${{ hashFiles('.build/install-nix') }}
          restore-keys: |
            ${{ runner.os }}-bin-

      - uses: actions/cache@v2
        id: nix-cache
        with:
          path: .nix
          key: ${{ runner.os }}-nix-${{ hashFiles('.build/install-nix') }}-${{ hashFiles('nix/default.nix') }}
          restore-keys: |
            ${{ runner.os }}-nix-

      - name: install nix
        run: |
          ./.build/install-nix

      - name: Install build dependencies
        run: |
          ./.build/run-nix nix-env -f ./nix -i

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(./.build/run-nix yarn cache dir)"

      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install yarn packages
        run: |
          ./.build/run-nix yarn --prefer-offline

      - name: Run Regenerate
        run: |
          ./.build/run-nix ./node_modules/.bin/ts-node -P tsconfig.bin.json bin/regenerate.ts

      - name: Publish to pages
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY
          ./.build/run-nix yarn deploy
